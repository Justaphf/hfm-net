# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master
- feature/*

stages:
- stage: Build
  jobs:
  - job: Build

    pool:
      vmImage: 'windows-latest'

    variables:
      solution: '**/HFM.All.sln'
      setupSolution: '**/HFM.Setup.sln'
      entryProject: '**/HFM.csproj'
      buildProjects: |
        **/*.csproj
        !**/HFM.Setup*.csproj
      buildConfiguration: 'Release'
      netFramework: 'net47'
      dotnetWindows: 'net5.0-windows'

    steps:
    - task: PowerShell@2
      displayName: 'HFM.Build - Update-AssemblyVersion'
      inputs:
        targetType: 'inline'
        script: |
          . .\HFM.Build.ps1
          Configure-Version -CommitCount
          Update-AssemblyVersion -AssemblyVersion $Global:Version -AssemblyFileVersion $Global:Version
          $buildNumber = "$env:BUILD_DEFINITIONNAME`_$Global:Version"
          Write-Host "##vso[build.updatebuildnumber]$buildNumber"
        workingDirectory: '.\src'

    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        verbosityRestore: 'Normal'
        
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '$(buildProjects)'
        arguments: '-c $(buildConfiguration) --verbosity normal --no-incremental --no-restore'
    
    - task: DotNetCoreCLI@2
      displayName: 'Publish'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(entryProject)'
        arguments: '-f $(dotnetWindows) -c $(buildConfiguration) --no-build --verbosity normal'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: DotNetCoreCLI@2
      displayName: 'Test HFM.Core'
      inputs:
        command: 'test'
        projects: '**/HFM.Core.Tests.csproj'
        arguments: '--no-build -c $(buildConfiguration) --collect:"XPlat Code Coverage"'

    - task: DotNetCoreCLI@2
      displayName: 'Test HFM.Forms'
      inputs:
        command: 'test'
        projects: '**/HFM.Forms.Tests.csproj'
        arguments: '--no-build -c $(buildConfiguration) --collect:"XPlat Code Coverage"'

    - task: DotNetCoreCLI@2
      displayName: 'Test HFM.Preferences'
      inputs:
        command: 'test'
        projects: '**/HFM.Preferences.Tests.csproj'
        arguments: '--no-build -c $(buildConfiguration) --collect:"XPlat Code Coverage"'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)\**\coverage.cobertura.xml'

    - task: PowerShell@2
      displayName: 'HFM.Build - Deploy-Build'
      inputs:
        targetType: 'inline'
        script: |
          . .\HFM.Build.ps1
          Clean-Artifacts -Verbose
          Deploy-Build -Verbose
        workingDirectory: '.\src'

    - task: PowerShell@2
      displayName: 'HFM.Build - Build-Zip'
      inputs:
        targetType: 'inline'
        script: |
          . .\HFM.Build.ps1
          Configure-Version -CommitCount
          Build-Zip -Verbose
        workingDirectory: '.\src'

    - task: VSBuild@1
      displayName: 'Build Setup ($(netFramework))'
      inputs:
        solution: $(setupSolution)
        platform: x86
        configuration: '$(buildConfiguration)'

    - task: PowerShell@2
      displayName: 'HFM.Build - Deploy-Msi ($(netFramework))'
      inputs:
        targetType: 'inline'
        script: |
          . .\HFM.Build.ps1
          Configure-Version -CommitCount
          Deploy-Msi -Verbose
        workingDirectory: '.\src'

    - task: CopyFiles@2
      displayName: 'Copy to Artifact Staging'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          src\Artifacts\**
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
